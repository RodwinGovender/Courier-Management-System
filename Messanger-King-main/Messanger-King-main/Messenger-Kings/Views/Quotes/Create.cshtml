@model Messenger_Kings.Models.Quote

@{ ViewBag.Title = "Create"; }

    <head>
        <style>
        .slidecontainer {
        width: 100%;
        }

        .slider {
        -webkit-appearance: none;
        width: 100%;
        height: 15px;
        background:#e9ecef;
        outline: none;
        opacity: 100;
        -webkit-transition: .2s;
        transition: opacity .2s;
        }

        .slider:hover {
        opacity: 1;
        }

        .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 25px;
        height: 25px;
        background: #640000;
        cursor: pointer;
        }

        .slider::-moz-range-thumb {
        width: 25px;
        height: 25px;
        background: #fff;
        cursor: pointer;
        }
            </style>
        </head>
<br />
<br />

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()



<div class="shadow p-3 mb-5 bg-white rounded">


    <h2>Get An Instant Quote!</h2>
    <hr />

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @*<div class="form-group">
            @Html.LabelFor(model => model.Quote_Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.Quote_Date, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Quote_Date, "", new { @class = "text-danger" })
            </div>
        </div>*@

    @*<div class="form-group">
            @Html.LabelFor(model => model.Quote_PickupAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.Quote_PickupAddress, new { htmlAttributes = new { @class = "form-control" } })

                @Html.ValidationMessageFor(model => model.Quote_PickupAddress, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Quote_DeliveryAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.Quote_DeliveryAddress, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Quote_DeliveryAddress, "", new { @class = "text-danger" })
            </div>
        </div>*@


    <div class="row">
        <div class="col-md-7">

            <div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Quote_PickupAddress, htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-7">
                        @Html.TextBoxFor(x => x.Quote_PickupAddress, new { @class = "form-control", id = "travelfrom", })

                        @Html.ValidationMessageFor(model => model.Quote_PickupAddress, "", new { @class = "text-danger" })



                    </div>

                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.Quote_DeliveryAddress, htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-7">
                        @Html.TextBoxFor(x => x.Quote_DeliveryAddress, new { @class = "form-control", id = "travelto" })

                        @Html.ValidationMessageFor(model => model.Quote_DeliveryAddress, "", new { @class = "text-danger" })
                        <br />

                        <input type="button" value="Get Distance" onclick="GetRoute()" class="btn btn-primary" />
                        <input type="button" value="Reset" onclick="Reset()" class="btn btn-secondary" />
                    </div>

                </div>









                <br />
                <div>
                    <div id="dvDistance">
                    </div>
                </div>

            </div>
























            <div class="form-group">
                @Html.LabelFor(model => model.Quote_Distance, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-7">
                    @Html.TextBoxFor(x => x.Quote_Distance, new { @class = "form-control", id = "distance", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.Quote_Distance, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

        </div>
        <div class="col-sm-4">








            <div id="map_canvas" style="height:400px;width:100%;">
            </div>



        </div>
    </div>
    <h3>Item Details</h3>
    <hr>
    <div class="row">
        <div class="col-md-6">


            <div class="form-group">
      
                <div class="col-md-7">
                    Item Description
                    @Html.EditorFor(model => model.Quote_Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Quote_Description, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
            @Html.LabelFor(model => model.Quote_Cost, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.Quote_Cost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Quote_Cost, "", new { @class = "text-danger" })
            </div>
        </div>*@


            <div class="form-group">
                @Html.Label("Quantity", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-7">
                    @Html.EditorFor(model => model.Item_Quantity, new { htmlAttributes = new { @class = "slider", type = "range", min = "0", max = "15", step = "1", oninput = "num.value = this.value" } }) <output id="num">0</output> Qty
                    @Html.ValidationMessageFor(model => model.Item_Quantity, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                
                <div class="col-md-7">
                    Item length (cm)
                    @Html.EditorFor(model => model.Quote_length, new { htmlAttributes = new { @class = "slider", type = "range", min = "0", max = "50", step = ".1", oninput = "num1.value = this.value" } }) <output id="num1">0</output> Cm
                    @Html.ValidationMessageFor(model => model.Quote_length, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
            
                <div class="col-md-7">
                    Item height (cm)
                    @Html.EditorFor(model => model.Quote_Height, new { htmlAttributes = new { @class = "slider", type = "range", min = "0", max = "50", step = ".1", oninput = "num2.value = this.value" } }) <output id="num2">0</output> Cm
                    @Html.ValidationMessageFor(model => model.Quote_Height, "", new { @class = "text-danger" })
                </div>
            </div>





        </div>
        <div class="col-md-6">
            <div class="form-group">
              
                <div class="col-md-7">
                    Item width (cm)
                    @Html.EditorFor(model => model.Quote_Width, new { htmlAttributes = new { @class = "slider", type = "range", min = "0", max = "50", step = ".1", oninput = "num3.value = this.value" } }) <output id="num3">0</output> Cm
                    @Html.ValidationMessageFor(model => model.Quote_Width, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">

                <div class="col-md-7">
                    Item weight (kg)
                    @Html.EditorFor(model => model.Quote_Weight, new { htmlAttributes = new { @class = "slider", type = "range", min = "0", max = "50", step = ".1", oninput = "num4.value = this.value" } }) <output id="num4">0</output> Kg
                    @Html.ValidationMessageFor(model => model.Quote_Weight, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
         
            <div class="form-group">
           
                <div class="col-md-10">
                    Client Type
                    @Html.DropDownList("ClientCat_ID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ClientCat_ID, "", new { @class = "text-danger" })
                </div>
            </div>
            @*<p id="map"></p>*@
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Proceed With Quote" onclick="calc()" class="btn btn-primary" />
                </div>
            </div>

        </div>


    </div>

</div>




            }

            @*<div>
                @Html.ActionLink("Back to List", "Index")
            </div>*@

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")

                <!--ENSURE YOU CHANGE TO YOUR OWN API KEY HERE !!! -->
                <script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyBJiH2ZhfOjGD9SCZSWwpo5BDoCiL3up3Y" type="text/javascript"></script>

                <!-- code for example 1 -->
                <script>

                    var source, destination;
                    var directionsDisplay;
                    var directionsService = new google.maps.DirectionsService();
                    var inputFrom = document.getElementById('travelfrom');
                    var inputTo = document.getElementById('travelto');
                    var distances = document.getElementById('distance');

                    // initialise the location of the map on Chichester in England (ref lat and lng)
                    //var map = new google.maps.Map(document.getElementById('dvMap'), {
                    //    center: { lat: 50.834697, lng: -0.773792 },
                    //    zoom: 13,
                    //    mapTypeId: 'roadmap'
                    //});

















                    var options = {
                        componentRestrictions: { country: ['za'] }
                    };




                    google.maps.event.addDomListener(window, 'load', function () {

                        var autocomplete1 = new google.maps.places.Autocomplete(inputFrom, options);
                        var autocomplete2 = new google.maps.places.Autocomplete(inputTo, options);

                    });

                    function GetRoute() {

                        var directionsDisplay;
                        var directionsService = new google.maps.DirectionsService();
                        var map;
                        var mapCenter = new google.maps.LatLng(-29.708421, 31.0322233);
                        var myOptions =
                        {
                            zoom: 12,
                            mapTypeId: google.maps.MapTypeId.ROADMAP,
                            center: mapCenter
                        };
                        map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
                        //There should be a div with id 'map_canvas' in your html.
                        //It can be done in angular directive if you are using angular


                        var request = {
                            origin: new google.maps.LatLng(-29.708421, 31.0322233),
                            destination: new google.maps.LatLng(-29.708421, 31.0322233),
                            travelMode: 'DRIVING'
                        }


                        directionsService.route(request, function (response, status) {
                            if (status === 'OK') {
                                directionsDisplay = new google.maps.DirectionsRenderer();
                                directionsDisplay.setMap(map);
                                directionsDisplay.setDirections(response);
                                // For each route, display summary information.
                            } else {
                                console.log('Directions request failed due to ' + status, response);
                            }
                        });


                        source = document.getElementById("travelfrom").value;
                        destination = document.getElementById("travelto").value;
                        distances.value = "";

                        var request = {
                            origin: source,
                            destination: destination,
                            travelMode: google.maps.TravelMode.DRIVING
                        };

                        directionsService.route(request, function (response, status) {
                            if (status == google.maps.DirectionsStatus.OK) {
                                directionsDisplay.setDirections(response);
                            }

                        });

                        //*********DISTANCE AND DURATION**********************//
                        var service = new google.maps.DistanceMatrixService();
                        service.getDistanceMatrix({
                            origins: [source],

                            destinations: [destination],
                            travelMode: google.maps.TravelMode.DRIVING,
                            unitSystem: google.maps.UnitSystem.METRIC,
                            avoidHighways: false,
                            avoidTolls: false
                        }, function (response, status) {

                            if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS") {
                                var distance = response.rows[0].elements[0].distance.text;
                                var duration = response.rows[0].elements[0].duration.value;

                                duration = parseFloat(duration / 60).toFixed(2);

                                distances.value = distance.toLowerCase().replace(" km", "");
                                distances.value = distances.value.split(',').join('.');
                                distances.value = parseFloat(distances.value);
                                inputFrom.readOnly = true;
                                inputTo.readOnly = true;


                            } else {
                                alert("Unable to find the distance via road.");
                                inputFrom.readOnly = false;
                                inputTo.readOnly = false;
                                distance.value = "";

                            }
                        });
                    }

                    function Reset() {


                        inputFrom.value = "";
                        inputTo.value = "";
                        distance.value = "";
                        inputFrom.readOnly = false;
                        inputTo.readOnly = false




                    }


                </script>


















            }

