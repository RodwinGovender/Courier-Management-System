@model IEnumerable<Messenger_Kings.Models.Coupon>
@using Messenger_Kings.Models

@{
    ViewBag.Title = "Win";
    //var coupons = ViewData["Coupons"] as Coupon;
}

@Scripts.Render("~/Scripts/TweenMax.min.js")

<head>

    <link rel="stylesheet" href="~/SpinContent/main.css" type="text/css" />
    <script type="text/javascript" src="~/Scripts/Winwheel.js"></script>

    @if (ViewBag.SpinsLeft >= 1)
    {
        <script type="text/javascript" src="~/Scripts/TweenMax.min.js"></script>

    }

</head>





<br />
<br />
<div class="shadow p-3 mb-5 bg-white rounded">








    <body>















        <div align="center">
            <h1>Win Coupons To Save Even More With Messanger King</h1>

            <br />



            @*<h4>Your Coupon Code: @ViewBag.CouponCode</h4>*@



            <table cellpadding="0" cellspacing="0" border="0">
                <tr>
                    <td>
                        Spins Remaining : @ViewBag.SpinsLeft <br /><br />
                        <div class="power_controls">
                            <br />
                            <br />
                            <table class="power" cellpadding="10" cellspacing="0">
                                <tr>
                                    <th align="center">Power</th>
                                </tr>
                                <tr>
                                    <td width="78" align="center" id="pw3" onClick="powerSelected(3);">High</td>
                                </tr>
                                <tr>
                                    <td align="center" id="pw2" onClick="powerSelected(2);">Med</td>
                                </tr>
                                <tr>
                                    <td align="center" id="pw1" onClick="powerSelected(1);">Low</td>
                                </tr>
                            </table>
                            <br />
                            <img id="spin_button" src="~/SpinContent/spin_off.png" alt="Spin" onClick="startSpin();" />
                            <br /><br />

                        </div>
                    </td>
                    <td width="438" height="582" class="the_wheel" align="center">
                        <canvas id="canvas" width="434" height="434">
                        </canvas>
                    </td>
                </tr>
            </table>

            <h4>1. Make A Booking | 2. Earn A Token | 3. Spin Wheel and Win </h4>
        </div>

        <h3>Your Unused Coupons</h3>
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Coupon_Code)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Coupon_Value)
                </th>

            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Coupon_Code)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Coupon_Value)
                    </td>

                </tr>
            }
        </table>
        <script>
        // Create new wheel object specifying the parameters at creation time.

        var spinon = '@Url.Content("~/SpinContent/spin_on.png")';
        var spinoff = '@Url.Content("~/SpinContent/spin_off.png")';

        let theWheel = new Winwheel({
            'numSegments': 16,   // Specify number of segments.
            'outerRadius': 212,  // Set radius to so wheel fits the background.
            'innerRadius': 120,  // Set inner radius to make wheel hollow.
            'textFontSize': 16,   // Set font size accordingly.
            'textMargin': 0,    // Take out default margin.
            'segments':       // Define segments including colour and text.
                [
                    { 'fillStyle': '#eae56f', 'text': 'R10' },
                    { 'fillStyle': '#89f26e', 'text': 'R20' },
                    { 'fillStyle': '#7de6ef', 'text': 'R10' },
                    { 'fillStyle': '#e7706f', 'text': 'R5' },
                    { 'fillStyle': '#eae56f', 'text': 'R5' },
                    { 'fillStyle': '#89f26e', 'text': 'R10' },
                    { 'fillStyle': '#7de6ef', 'text': 'R5' },
                    { 'fillStyle': '#e7706f', 'text': 'R10' },
                    { 'fillStyle': '#eae56f', 'text': 'R5' },
                    { 'fillStyle': '#89f26e', 'text': 'R10' },
                    { 'fillStyle': '#7de6ef', 'text': 'R50' },
                    { 'fillStyle': '#e7706f', 'text': 'R20' },
                    { 'fillStyle': '#eae56f', 'text': 'R15' },
                    { 'fillStyle': '#89f26e', 'text': 'R25' },
                    { 'fillStyle': '#7de6ef', 'text': 'R5' },
                    { 'fillStyle': '#e7706f', 'text': 'R5' }
                ],
            'animation':           // Define spin to stop animation.
            {
                'type': 'spinToStop',
                'duration': 5,
                'spins': 8,
                'callbackFinished': alertPrize
            }
        });

        // Vars used by the code in this page to do power controls.
        let wheelPower = 0;
        let wheelSpinning = false;

        // -------------------------------------------------------
        // Function to handle the onClick on the power buttons.
        // -------------------------------------------------------
        function powerSelected(powerLevel) {
            // Ensure that power can't be changed while wheel is spinning.
            if (wheelSpinning == false) {
                // Reset all to grey incase this is not the first time the user has selected the power.
                document.getElementById('pw1').className = "";
                document.getElementById('pw2').className = "";
                document.getElementById('pw3').className = "";

                // Now light up all cells below-and-including the one selected by changing the class.
                if (powerLevel >= 1) {
                    document.getElementById('pw1').className = "pw1";
                }

                if (powerLevel >= 2) {
                    document.getElementById('pw2').className = "pw2";
                }

                if (powerLevel >= 3) {
                    document.getElementById('pw3').className = "pw3";
                }

                // Set wheelPower var used when spin button is clicked.
                wheelPower = powerLevel;

                // Light up the spin button by changing it's source image and adding a clickable class to it.
                document.getElementById('spin_button').src = spinon;
                document.getElementById('spin_button').className = "clickable";
            }
        }

        // -------------------------------------------------------
        // Click handler for spin button.
        // -------------------------------------------------------
        function startSpin() {

            if (@ViewBag.SpinsLeft >= 1) {
                // Ensure that spinning can't be clicked again while already running.
                if (wheelSpinning == false) {
                    // Based on the power level selected adjust the number of spins for the wheel, the more times is has
                    // to rotate with the duration of the animation the quicker the wheel spins.
                    if (wheelPower == 1) {
                        theWheel.animation.spins = 3;
                    } else if (wheelPower == 2) {
                        theWheel.animation.spins = 8;
                    } else if (wheelPower == 3) {
                        theWheel.animation.spins = 15;
                    }

                    // Disable the spin button so can't click again while wheel is spinning.
                    document.getElementById('spin_button').src = spinoff;
                    document.getElementById('spin_button').className = "";

                    // Begin the spin animation by calling startAnimation on the wheel object.
                    theWheel.startAnimation();

                    // Set to true so that power can't be changed and spin button re-enabled during
                    // the current animation. The user will have to reset before spinning again.
                    wheelSpinning = true;
                }
            }
            else {


                alert("You have 0 spins please make a purchase");

            }

        }

        // -------------------------------------------------------
        // Function for reset button.
        // -------------------------------------------------------
        function resetWheel() {
            theWheel.stopAnimation(false);  // Stop the animation, false as param so does not call callback function.
            theWheel.rotationAngle = 0;     // Re-set the wheel angle to 0 degrees.
            theWheel.draw();                // Call draw to render changes to the wheel.

            document.getElementById('pw1').className = "";  // Remove all colours from the power level indicators.
            document.getElementById('pw2').className = "";
            document.getElementById('pw3').className = "";

            wheelSpinning = false;          // Reset to false to power buttons and spin can be clicked again.
        }

        // -------------------------------------------------------
        // Called when the spin animation has finished by the callback feature of the wheel because I specified callback in the parameters.
        // note the indicated segment is passed in as a parmeter as 99% of the time you will want to know this to inform the user of their prize.
        // -------------------------------------------------------
        function alertPrize(indicatedSegment) {
            // Do basic alert of the segment text. You would probably want to do something more interesting with this information.

            alert("Congratulations you have won a " + indicatedSegment.text + " coupon");
            var amount = indicatedSegment.text;
            var removeR = amount.replace('R', '');
            $.ajax(
                {
                    type: "POST", //HTTP POST Method
                    url: "Win", // Controller/View
                    data: { //Passing data
                        Coupon_Value: removeR //Reading text box values using Jquery

                    }

                });

            setInterval('location.reload()', 2000);

        }
        </script>

        <script type="text/javascript" src="~/SpinContent/TweenMax.min.js"></script>

    </body>

    </div>
